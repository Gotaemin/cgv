<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tm.cgv.review.ReviewRepository">

	<!-- 해당 조건의 num 받아오기 +egg-->
	<select id="reviewList" parameterType="java.util.Map" resultType="ReviewVO">
		select L.num, L.movieNum, L.title, L.fileName, L.theaterName, L.cinemaName, L.movieTimeNum, L.screenDate, L.screenTime, L.common, L.teenager, L.preference, L.createAt, R.egg
		from(SELECT R.num, R.movieNum, R.title, R.fileName, R.theaterName, R.cinemaName, R.movieTimeNum, R.screenDate, R.screenTime, R.common, R.teenager, R.preference, C.createAt
		FROM (select MRI.num, MRI.movieNum, MRI.title, MRI.fileName, MRI.theaterName, MRI.cinemaName, MRI.movieTimeNum, T.screenDate, T.screenTime, MRI.common, MRI.teenager, MRI.preference
		from movieTime T inner join (select RI.num, RI.movieNum, RI.title, M.fileName, RI.theaterName, RI.cinemaName, RI.movieTimeNum, RI.common, RI.teenager, RI.preference
		from movieImage M inner join (select R.num, R.movieNum, R.cinemaName, R.theaterName, R.movieTimeNum, R.common, R.teenager, R.preference, I.title
		from (select * from reservation 
		where uid='admin' and deleteAt is null ) R inner join movieInfo I
		on(R.movieNum = I.num)) RI
		on(M.movieNum = RI.movieNum)) MRI
		on(T.num = MRI.movieTimeNum)) R LEFT OUTER JOIN (select reservationNum, createAt from review where createAt is not null and deleteAt is null) C
		ON R.num = C.reservationNum) L LEFT OUTER JOIN (select reservationNum, egg from review where createAt is not null and deleteAt is null) R 
		on(L.num = R.reservationNum)
		ORDER BY L.num desc
		limit #{pager.startRow},#{pager.perPage}
	</select>
	
	<insert id="review_Write1" parameterType="ReviewVO" useGeneratedKeys="true" keyProperty="num">
		insert into review (reservationNum,contents,like1,egg,charmPoint,emotionPoint,createAt) 
		VALUES (#{reservationNum},#{contents},0,#{egg},0,0,now())
	</insert> 
	
	<insert id="review_Write2" parameterType="ReviewVO" useGeneratedKeys="true" keyProperty="num">
		insert into review (reservationNum,contents,like1,egg,charmPoint,emotionPoint,createAt) 
		VALUES (#{reservationNum},#{contents},0,#{egg},#{charmPoint},#{emotionPoint},now())
	</insert> 
	
	<select id="reviewSelect" parameterType="ReviewVO" resultType="ReviewVO">
		select R.reservationNum, R.createAt, M.uid, M.title, M.fileName, R.contents, R.egg
		from(select M.num, M.movieNum, M.uid, M.title, I.fileName
		from (select R.num, R.movieNum, R.uid, I.title
		from (select num,movieNum,uid from reservation) R inner join (select num, title from movieInfo) I
		on (R.movieNum = I.num)) M inner join (select * from movieImage) I
		on(M.movieNum = I.movieNum)) M inner join (select * from review) R
		on(M.num = R.reservationNum)
		where R.createAt is not null and R.deleteAt is null 
		and R.reservationNum = #{reservationNum}
	</select>
	
	
	<update id="review_Delete">
	UPDATE review
	SET deleteAt = now()
	where reservationNum=#{reservationNum}
	</update>
	
	<update id="reservation_Delete">
	UPDATE reservation
	SET deleteAt = now()
	where num=#{num}
	</update>
	
	<select id="reviewLook" parameterType="String" resultType="ReviewVO">
		select R.reservationNum, R.createAt, M.uid, M.title, M.fileName, R.contents, R.egg, R.like1
		from(select M.num, M.movieNum, M.uid, M.title, I.fileName
		from (select R.num, R.movieNum, R.uid, I.title
		from (select num,movieNum,uid from reservation) R inner join (select num, title from movieInfo) I
		on (R.movieNum = I.num)) M inner join (select * from movieImage) I
		on(M.movieNum = I.movieNum)) M inner join (select * from review) R
		on(M.num = R.reservationNum)
		where R.createAt is not null and R.deleteAt is null
		ORDER BY R.createAt desc, R.reservationNum desc
	</select>
	
	<select id="search_Count" resultType="Integer"> <!-- 총 영화예매건수 확인 -->
		select count(*) as count from reservation where uid=#{uid} and deleteAt is null
	</select>
	
	<update id="review_Update1" parameterType="ReviewVO" useGeneratedKeys="true" keyProperty="num">
		UPDATE review
		SET contents=#{contents},egg=#{egg}
		where reservationNum=#{reservationNum}
	</update>
	
	<update id="review_Update2" parameterType="ReviewVO" useGeneratedKeys="true" keyProperty="num">
		UPDATE review
		SET contents=#{contents},egg=#{egg},charmPoint=#{charmPoint},emotionPoint=#{emotionPoint}
		where reservationNum=#{reservationNum}
	</update>
	
	
	<select id="movieSelect" resultType="ReviewVO" parameterType="Integer">
		select RV.reservationNum, RV.contents, RV.egg, RV.like1, RE.uid, RE.createAt
		from(select num,uid,createAt from reservation 
		where movieNum=#{movieNum} and createAt is not null and deleteAt is null) RE inner join (select * from review) RV
		on(RV.reservationNum = RE.num)
		where RV.createAt is not null and RV.deleteAt is null ORDER BY RE.createAt desc, RV.reservationNum desc
	</select>
	
	
	
	
	
	<!-- ........................................................................................... -->

	<!-- 받아온 num으로 join하여 정보출력 -->
	<select id="reviewList2" parameterType="Long" resultType="ReviewVO">
		select MRI.num, MRI.movieNum, MRI.title, MRI.fileName, MRI.theaterName, MRI.cinemaName, MRI.movieTimeNum, T.screenDate, T.screenTime, MRI.common, MRI.teenager, MRI.preference
		from movieTime T inner join (select RI.num, RI.movieNum, RI.title, M.fileName, RI.theaterName, RI.cinemaName, RI.movieTimeNum, RI.common, RI.teenager, RI.preference
		from movieImage M inner join (select R.num, R.movieNum, R.cinemaName, R.theaterName,R.movieTimeNum, R.common, R.teenager, R.preference, I.title
		from reservation R inner join movieInfo I
		on(R.movieNum = I.num) where R.num=#{num}) RI
		on(M.movieNum = RI.movieNum)) MRI
		on(T.num = MRI.movieTimeNum) 
	</select>
	
	
	<!-- m(Long타입)과 페이지(Pager) 2개 필요 -->
	<select id="getList" parameterType="Pager" resultType="TestVO">
		select * from test limit #{startRow},#{perPage}
	</select>
	
</mapper>